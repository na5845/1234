name: 🎙️ תמלול קובץ אודיו

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'קישור לקובץ אודיו/וידאו'
        required: true
        type: string
      model_size:
        description: 'גודל מודל'
        required: true
        default: 'base'
        type: choice
        options:
          - tiny    # מהיר, פחות מדויק
          - base    # מאוזן
          - small   # מדויק
          - medium  # מדויק מאוד

jobs:
  transcribe:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout קוד
      uses: actions/checkout@v4
    
    - name: 🐍 התקנת Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 🎵 התקנת FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        ffmpeg -version
    
    - name: 📦 התקנת תלויות
      run: |
        pip install --upgrade pip
        pip install openai-whisper yt-dlp
    
    - name: 📥 הורדת קובץ משופרת
      run: |
        echo "מוריד קובץ מ: ${{ inputs.file_url }}"
        
        # בדוק אם זה YouTube
        if [[ "${{ inputs.file_url }}" =~ youtube\.com|youtu\.be ]]; then
          echo "🎥 מזוהה קישור YouTube"
          yt-dlp -x --audio-format mp3 -o "input.mp3" "${{ inputs.file_url }}"
        else
          echo "📁 מוריד קובץ רגיל"
          
          # נסה עם curl עם headers
          curl -L \
               -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
               -H "Accept: audio/*,video/*,*/*" \
               --max-redirs 10 \
               --connect-timeout 30 \
               --max-time 300 \
               -o "input.mp3" \
               "${{ inputs.file_url }}"
          
          # בדוק אם ההורדה הצליחה
          if [ ! -f "input.mp3" ]; then
            echo "❌ ההורדה נכשלה!"
            exit 1
          fi
        fi
        
        # בדוק גודל קובץ
        echo "📊 פרטי הקובץ:"
        ls -lh input.mp3
        
        # בדוק שהקובץ לא ריק
        FILE_SIZE=$(stat -c%s "input.mp3" 2>/dev/null || stat -f%z "input.mp3" 2>/dev/null)
        if [ "$FILE_SIZE" -eq 0 ]; then
          echo "❌ הקובץ ריק!"
          exit 1
        fi
        
        # בדוק את סוג הקובץ
        echo "🔍 בודק סוג קובץ:"
        file input.mp3
        
        # נסה לבדוק עם ffprobe
        echo "🎵 בודק עם ffprobe:"
        ffprobe -v error -show_format -show_streams input.mp3 || true
        
        # אם הקובץ לא MP3, נסה להמיר
        if ! ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 input.mp3 | grep -q "mp3"; then
          echo "⚙️ ממיר לפורמט MP3..."
          mv input.mp3 temp_input
          ffmpeg -i temp_input -acodec mp3 -ab 192k input.mp3
          rm temp_input
        fi
    
    - name: 🎙️ תמלול
      env:
        MODEL_SIZE: ${{ inputs.model_size }}
      run: |
        python << 'EOF'
        import whisper
        import json
        import os
        from datetime import datetime
        
        model_size = os.environ.get('MODEL_SIZE', 'base')
        print(f"🔄 טוען מודל {model_size}...")
        model = whisper.load_model(model_size)
        
        print("🎙️ מתחיל תמלול...")
        
        try:
            result = model.transcribe("input.mp3", language="he", verbose=True)
        except Exception as e:
            print(f"❌ שגיאה בתמלול: {e}")
            # נסה בלי verbose
            print("🔄 מנסה שוב בלי verbose mode...")
            result = model.transcribe("input.mp3", language="he", verbose=False)
        
        # שמור טקסט
        with open("transcription.txt", "w", encoding="utf-8") as f:
            f.write(result["text"])
        
        # שמור JSON עם מטא-דאטה
        metadata = {
            "date": datetime.now().isoformat(),
            "model": model_size,
            "language": "Hebrew",
            "duration": result.get("duration", 0),
            "text": result["text"],
            "segments": result["segments"]
        }
        
        with open("transcription.json", "w", encoding="utf-8") as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        # צור כתוביות SRT
        with open("subtitles.srt", "w", encoding="utf-8") as f:
            for i, segment in enumerate(result["segments"], 1):
                start = f"{int(segment['start']//3600):02d}:{int(segment['start']%3600//60):02d}:{segment['start']%60:06.3f}".replace(".", ",")
                end = f"{int(segment['end']//3600):02d}:{int(segment['end']%3600//60):02d}:{segment['end']%60:06.3f}".replace(".", ",")
                f.write(f"{i}\n{start} --> {end}\n{segment['text'].strip()}\n\n")
        
        print("✅ התמלול הושלם בהצלחה!")
        print(f"📊 אורך: {result.get('duration', 0):.1f} שניות")
        print(f"📝 מילים: {len(result['text'].split())}")
        
        # הצג תצוגה מקדימה
        print("\n📝 תצוגה מקדימה של התמלול:")
        print("-" * 50)
        preview = result["text"][:500] + "..." if len(result["text"]) > 500 else result["text"]
        print(preview)
        EOF
    
    - name: 📤 העלאת תוצאות
      uses: actions/upload-artifact@v4
      with:
        name: תוצאות-תמלול-${{ github.run_number }}
        path: |
          transcription.txt
          transcription.json
          subtitles.srt
